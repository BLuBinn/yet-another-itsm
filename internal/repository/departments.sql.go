// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: departments.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT 
    id,
    business_unit_id,
    name,
    is_active,
    created_at,
    updated_at,
    deleted_at
FROM departments 
WHERE id = $1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id pgtype.UUID) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.BusinessUnitID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDepartmentByName = `-- name: GetDepartmentByName :one
SELECT 
    id,
    business_unit_id,
    name,
    is_active,
    created_at,
    updated_at,
    deleted_at
FROM departments 
WHERE name = $1 AND business_unit_id = $2
`

type GetDepartmentByNameParams struct {
	Name           string      `json:"name"`
	BusinessUnitID pgtype.UUID `json:"business_unit_id"`
}

func (q *Queries) GetDepartmentByName(ctx context.Context, arg GetDepartmentByNameParams) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByName, arg.Name, arg.BusinessUnitID)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.BusinessUnitID,
		&i.Name,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
