// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: departments.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDepartment = `-- name: CreateDepartment :one
INSERT INTO departments (
    name,
    status
) VALUES (
    $1,
    $2
) RETURNING 
    id,
    name,
    status,
    created_at,
    updated_at,
    deleted_at
`

type CreateDepartmentParams struct {
	Name   string         `json:"name"`
	Status NullStatusEnum `json:"status"`
}

func (q *Queries) CreateDepartment(ctx context.Context, arg CreateDepartmentParams) (Department, error) {
	row := q.db.QueryRow(ctx, createDepartment, arg.Name, arg.Status)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDepartmentByID = `-- name: GetDepartmentByID :one
SELECT 
    id,
    name,
    status,
    created_at,
    updated_at,
    deleted_at
FROM departments 
WHERE id = $1
`

func (q *Queries) GetDepartmentByID(ctx context.Context, id pgtype.UUID) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByID, id)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getDepartmentByName = `-- name: GetDepartmentByName :one
SELECT 
    id,
    name,
    status,
    created_at,
    updated_at,
    deleted_at
FROM departments
WHERE name = $1
`

func (q *Queries) GetDepartmentByName(ctx context.Context, name string) (Department, error) {
	row := q.db.QueryRow(ctx, getDepartmentByName, name)
	var i Department
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
