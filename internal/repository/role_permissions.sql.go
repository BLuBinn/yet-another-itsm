// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: role_permissions.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRolePermission = `-- name: CreateRolePermission :one
INSERT INTO role_permissions (
    role_id,
    permission_id,
    scope_id,
    status
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, role_id, permission_id, scope_id, status, created_at, updated_at, deleted_at
`

type CreateRolePermissionParams struct {
	RoleID       string         `json:"role_id"`
	PermissionID string         `json:"permission_id"`
	ScopeID      pgtype.Text    `json:"scope_id"`
	Status       NullStatusEnum `json:"status"`
}

func (q *Queries) CreateRolePermission(ctx context.Context, arg CreateRolePermissionParams) (RolePermission, error) {
	row := q.db.QueryRow(ctx, createRolePermission,
		arg.RoleID,
		arg.PermissionID,
		arg.ScopeID,
		arg.Status,
	)
	var i RolePermission
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PermissionID,
		&i.ScopeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPermissionsByRole = `-- name: GetPermissionsByRole :many
SELECT 
    rp.id,
    rp.role_id,
    rp.permission_id,
    rp.scope_id,
    rp.status,
    rp.created_at,
    rp.updated_at,
    rp.deleted_at,
    r.name as role_name,
    p.name as permission_name,
    p.resource,
    p.action,
    s.name as scope_name
FROM role_permissions rp
JOIN roles r ON rp.role_id = r.id
JOIN permissions p ON rp.permission_id = p.id
LEFT JOIN scopes s ON rp.scope_id = s.id
WHERE rp.role_id = $1 AND rp.deleted_at IS NULL
ORDER BY p.resource, p.action
`

type GetPermissionsByRoleRow struct {
	ID             pgtype.UUID        `json:"id"`
	RoleID         string             `json:"role_id"`
	PermissionID   string             `json:"permission_id"`
	ScopeID        pgtype.Text        `json:"scope_id"`
	Status         NullStatusEnum     `json:"status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
	RoleName       string             `json:"role_name"`
	PermissionName string             `json:"permission_name"`
	Resource       string             `json:"resource"`
	Action         string             `json:"action"`
	ScopeName      pgtype.Text        `json:"scope_name"`
}

func (q *Queries) GetPermissionsByRole(ctx context.Context, roleID string) ([]GetPermissionsByRoleRow, error) {
	rows, err := q.db.Query(ctx, getPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPermissionsByRoleRow
	for rows.Next() {
		var i GetPermissionsByRoleRow
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.PermissionID,
			&i.ScopeID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.RoleName,
			&i.PermissionName,
			&i.Resource,
			&i.Action,
			&i.ScopeName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolePermissionByID = `-- name: GetRolePermissionByID :one
SELECT 
    rp.id,
    rp.role_id,
    rp.permission_id,
    rp.scope_id,
    rp.status,
    rp.created_at,
    rp.updated_at,
    rp.deleted_at,
    r.name as role_name,
    p.name as permission_name,
    p.resource,
    p.action,
    s.name as scope_name
FROM role_permissions rp
JOIN roles r ON rp.role_id = r.id
JOIN permissions p ON rp.permission_id = p.id
LEFT JOIN scopes s ON rp.scope_id = s.id
WHERE rp.id = $1
`

type GetRolePermissionByIDRow struct {
	ID             pgtype.UUID        `json:"id"`
	RoleID         string             `json:"role_id"`
	PermissionID   string             `json:"permission_id"`
	ScopeID        pgtype.Text        `json:"scope_id"`
	Status         NullStatusEnum     `json:"status"`
	CreatedAt      pgtype.Timestamptz `json:"created_at"`
	UpdatedAt      pgtype.Timestamptz `json:"updated_at"`
	DeletedAt      pgtype.Timestamptz `json:"deleted_at"`
	RoleName       string             `json:"role_name"`
	PermissionName string             `json:"permission_name"`
	Resource       string             `json:"resource"`
	Action         string             `json:"action"`
	ScopeName      pgtype.Text        `json:"scope_name"`
}

func (q *Queries) GetRolePermissionByID(ctx context.Context, id pgtype.UUID) (GetRolePermissionByIDRow, error) {
	row := q.db.QueryRow(ctx, getRolePermissionByID, id)
	var i GetRolePermissionByIDRow
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.PermissionID,
		&i.ScopeID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.RoleName,
		&i.PermissionName,
		&i.Resource,
		&i.Action,
		&i.ScopeName,
	)
	return i, err
}
