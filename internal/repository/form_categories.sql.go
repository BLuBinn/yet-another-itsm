// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: form_categories.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFormCategory = `-- name: CreateFormCategory :one
INSERT INTO form_categories (
    name, description
) VALUES ($1, $2)
RETURNING id, name, description, status, created_at, updated_at, deleted_at
`

type CreateFormCategoryParams struct {
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateFormCategory(ctx context.Context, arg CreateFormCategoryParams) (FormCategory, error) {
	row := q.db.QueryRow(ctx, createFormCategory, arg.Name, arg.Description)
	var i FormCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFormCategory = `-- name: DeleteFormCategory :exec
UPDATE form_categories
SET 
    status = 'inactive',
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteFormCategory(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFormCategory, id)
	return err
}

const getFormCategories = `-- name: GetFormCategories :many
SELECT id, name, description, status, created_at, updated_at, deleted_at FROM form_categories
WHERE status = 'active' AND deleted_at IS NULL
ORDER BY name
`

func (q *Queries) GetFormCategories(ctx context.Context) ([]FormCategory, error) {
	rows, err := q.db.Query(ctx, getFormCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormCategory
	for rows.Next() {
		var i FormCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormCategoryByID = `-- name: GetFormCategoryByID :one
SELECT id, name, description, status, created_at, updated_at, deleted_at FROM form_categories
WHERE id = $1 AND status = 'active' AND deleted_at IS NULL
`

func (q *Queries) GetFormCategoryByID(ctx context.Context, id pgtype.UUID) (FormCategory, error) {
	row := q.db.QueryRow(ctx, getFormCategoryByID, id)
	var i FormCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateFormCategory = `-- name: UpdateFormCategory :one
UPDATE form_categories
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, status, created_at, updated_at, deleted_at
`

type UpdateFormCategoryParams struct {
	ID          pgtype.UUID `json:"id"`
	Name        string      `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateFormCategory(ctx context.Context, arg UpdateFormCategoryParams) (FormCategory, error) {
	row := q.db.QueryRow(ctx, updateFormCategory, arg.ID, arg.Name, arg.Description)
	var i FormCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
