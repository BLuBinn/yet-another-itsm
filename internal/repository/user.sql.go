// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    azure_ad_object_id,
    home_tenant_id,
    department_id,
    business_unit_id,
    manager_id,
    mail,
    display_name,
    given_name,
    sur_name,
    job_title,
    office_location,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, azure_ad_object_id, home_tenant_id, department_id, business_unit_id, manager_id, mail, display_name, given_name, sur_name, job_title, office_location, status, last_login, locked_until, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	AzureAdObjectID string         `json:"azure_ad_object_id"`
	HomeTenantID    pgtype.UUID    `json:"home_tenant_id"`
	DepartmentID    pgtype.UUID    `json:"department_id"`
	BusinessUnitID  pgtype.UUID    `json:"business_unit_id"`
	ManagerID       pgtype.UUID    `json:"manager_id"`
	Mail            string         `json:"mail"`
	DisplayName     string         `json:"display_name"`
	GivenName       pgtype.Text    `json:"given_name"`
	SurName         pgtype.Text    `json:"sur_name"`
	JobTitle        pgtype.Text    `json:"job_title"`
	OfficeLocation  pgtype.Text    `json:"office_location"`
	Status          NullStatusEnum `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.AzureAdObjectID,
		arg.HomeTenantID,
		arg.DepartmentID,
		arg.BusinessUnitID,
		arg.ManagerID,
		arg.Mail,
		arg.DisplayName,
		arg.GivenName,
		arg.SurName,
		arg.JobTitle,
		arg.OfficeLocation,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AzureAdObjectID,
		&i.HomeTenantID,
		&i.DepartmentID,
		&i.BusinessUnitID,
		&i.ManagerID,
		&i.Mail,
		&i.DisplayName,
		&i.GivenName,
		&i.SurName,
		&i.JobTitle,
		&i.OfficeLocation,
		&i.Status,
		&i.LastLogin,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllUsersInDepartment = `-- name: GetAllUsersInDepartment :many
SELECT 
    id,
    azure_ad_object_id,
    home_tenant_id,
    department_id,
    business_unit_id,
    manager_id,
    mail,
    display_name,
    given_name,
    sur_name,
    job_title,
    office_location,
    status,
    last_login,
    locked_until,
    created_at,
    updated_at,
    deleted_at
FROM users 
WHERE department_id = $1 AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetAllUsersInDepartment(ctx context.Context, departmentID pgtype.UUID) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersInDepartment, departmentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AzureAdObjectID,
			&i.HomeTenantID,
			&i.DepartmentID,
			&i.BusinessUnitID,
			&i.ManagerID,
			&i.Mail,
			&i.DisplayName,
			&i.GivenName,
			&i.SurName,
			&i.JobTitle,
			&i.OfficeLocation,
			&i.Status,
			&i.LastLogin,
			&i.LockedUntil,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id,
    azure_ad_object_id,
    home_tenant_id,
    department_id,
    business_unit_id,
    manager_id,
    mail,
    display_name,
    given_name,
    sur_name,
    job_title,
    office_location,
    status,
    last_login,
    locked_until,
    created_at,
    updated_at,
    deleted_at
FROM users 
WHERE mail = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, mail string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, mail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AzureAdObjectID,
		&i.HomeTenantID,
		&i.DepartmentID,
		&i.BusinessUnitID,
		&i.ManagerID,
		&i.Mail,
		&i.DisplayName,
		&i.GivenName,
		&i.SurName,
		&i.JobTitle,
		&i.OfficeLocation,
		&i.Status,
		&i.LastLogin,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT 
    id,
    azure_ad_object_id,
    home_tenant_id,
    department_id,
    business_unit_id,
    manager_id,
    mail,
    display_name,
    given_name,
    sur_name,
    job_title,
    office_location,
    status,
    last_login,
    locked_until,
    created_at,
    updated_at,
    deleted_at
FROM users 
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AzureAdObjectID,
		&i.HomeTenantID,
		&i.DepartmentID,
		&i.BusinessUnitID,
		&i.ManagerID,
		&i.Mail,
		&i.DisplayName,
		&i.GivenName,
		&i.SurName,
		&i.JobTitle,
		&i.OfficeLocation,
		&i.Status,
		&i.LastLogin,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users 
SET 
    last_login = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE mail = $1
`

func (q *Queries) UpdateUserLastLogin(ctx context.Context, mail string) error {
	_, err := q.db.Exec(ctx, updateUserLastLogin, mail)
	return err
}
