// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: permissions.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermission = `-- name: CreatePermission :one
INSERT INTO permissions (
    id,
    name,
    description,
    resource,
    action,
    status
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, name, description, resource, action, status, created_at, updated_at, deleted_at
`

type CreatePermissionParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Resource    string         `json:"resource"`
	Action      string         `json:"action"`
	Status      NullStatusEnum `json:"status"`
}

func (q *Queries) CreatePermission(ctx context.Context, arg CreatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, createPermission,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Resource,
		arg.Action,
		arg.Status,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Resource,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deletePermission = `-- name: DeletePermission :exec
UPDATE permissions 
SET 
    deleted_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeletePermission(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deletePermission, id)
	return err
}

const getActivePermissions = `-- name: GetActivePermissions :many
SELECT 
    id,
    name,
    description,
    resource,
    action,
    status,
    created_at,
    updated_at,
    deleted_at
FROM permissions 
WHERE is_active = true AND deleted_at IS NULL
ORDER BY resource, action
`

func (q *Queries) GetActivePermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getActivePermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Resource,
			&i.Action,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPermissions = `-- name: GetAllPermissions :many
SELECT 
    id,
    name,
    description,
    resource,
    action,
    status,
    created_at,
    updated_at,
    deleted_at
FROM permissions 
WHERE deleted_at IS NULL
ORDER BY resource, action
`

func (q *Queries) GetAllPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getAllPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Resource,
			&i.Action,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionByID = `-- name: GetPermissionByID :one
SELECT 
    id,
    name,
    description,
    resource,
    action,
    status,
    created_at,
    updated_at,
    deleted_at
FROM permissions 
WHERE id = $1
`

func (q *Queries) GetPermissionByID(ctx context.Context, id string) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionByID, id)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Resource,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getPermissionsByResource = `-- name: GetPermissionsByResource :many
SELECT 
    id,
    name,
    description,
    resource,
    action,
    status,
    created_at,
    updated_at,
    deleted_at
FROM permissions 
WHERE resource = $1 AND deleted_at IS NULL
ORDER BY action
`

func (q *Queries) GetPermissionsByResource(ctx context.Context, resource string) ([]Permission, error) {
	rows, err := q.db.Query(ctx, getPermissionsByResource, resource)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Resource,
			&i.Action,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByResourceAndAction = `-- name: GetPermissionsByResourceAndAction :one
SELECT 
    id,
    name,
    description,
    resource,
    action,
    status,
    created_at,
    updated_at,
    deleted_at
FROM permissions 
WHERE resource = $1 AND action = $2 AND deleted_at IS NULL
`

type GetPermissionsByResourceAndActionParams struct {
	Resource string `json:"resource"`
	Action   string `json:"action"`
}

func (q *Queries) GetPermissionsByResourceAndAction(ctx context.Context, arg GetPermissionsByResourceAndActionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, getPermissionsByResourceAndAction, arg.Resource, arg.Action)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Resource,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updatePermission = `-- name: UpdatePermission :one
UPDATE permissions 
SET 
    name = $2,
    description = $3,
    resource = $4,
    action = $5,
    status = $6,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, name, description, resource, action, status, created_at, updated_at, deleted_at
`

type UpdatePermissionParams struct {
	ID          string         `json:"id"`
	Name        string         `json:"name"`
	Description pgtype.Text    `json:"description"`
	Resource    string         `json:"resource"`
	Action      string         `json:"action"`
	Status      NullStatusEnum `json:"status"`
}

func (q *Queries) UpdatePermission(ctx context.Context, arg UpdatePermissionParams) (Permission, error) {
	row := q.db.QueryRow(ctx, updatePermission,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Resource,
		arg.Action,
		arg.Status,
	)
	var i Permission
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Resource,
		&i.Action,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
