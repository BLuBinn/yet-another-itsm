// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    id,
    name,
    description,
    is_system_role,
    status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, name, description, is_system_role, status, created_at, updated_at, deleted_at
`

type CreateRoleParams struct {
	ID           string         `json:"id"`
	Name         string         `json:"name"`
	Description  pgtype.Text    `json:"description"`
	IsSystemRole pgtype.Bool    `json:"is_system_role"`
	Status       NullStatusEnum `json:"status"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (Role, error) {
	row := q.db.QueryRow(ctx, createRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.IsSystemRole,
		arg.Status,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsSystemRole,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllRoles = `-- name: GetAllRoles :many
SELECT 
    id,
    name,
    description,
    is_system_role,
    status,
    created_at,
    updated_at,
    deleted_at
FROM roles 
WHERE deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetAllRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getAllRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsSystemRole,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByID = `-- name: GetRoleByID :one
SELECT 
    id,
    name,
    description,
    is_system_role,
    status,
    created_at,
    updated_at,
    deleted_at
FROM roles 
WHERE id = $1
`

func (q *Queries) GetRoleByID(ctx context.Context, id string) (Role, error) {
	row := q.db.QueryRow(ctx, getRoleByID, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.IsSystemRole,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getSystemRoles = `-- name: GetSystemRoles :many
SELECT 
    id,
    name,
    description,
    is_system_role,
    status,
    created_at,
    updated_at,
    deleted_at
FROM roles 
WHERE is_system_role AND deleted_at IS NULL
ORDER BY name ASC
`

func (q *Queries) GetSystemRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, getSystemRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.IsSystemRole,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
