// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: form_templates.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFormTemplate = `-- name: CreateFormTemplate :one
INSERT INTO form_templates (
    name, description, form_category_id, business_unit_id,
    version, created_by
) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at
`

type CreateFormTemplateParams struct {
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
	FormCategoryID pgtype.UUID `json:"form_category_id"`
	BusinessUnitID pgtype.UUID `json:"business_unit_id"`
	Version        pgtype.Int4 `json:"version"`
	CreatedBy      pgtype.UUID `json:"created_by"`
}

func (q *Queries) CreateFormTemplate(ctx context.Context, arg CreateFormTemplateParams) (FormTemplate, error) {
	row := q.db.QueryRow(ctx, createFormTemplate,
		arg.Name,
		arg.Description,
		arg.FormCategoryID,
		arg.BusinessUnitID,
		arg.Version,
		arg.CreatedBy,
	)
	var i FormTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FormCategoryID,
		&i.BusinessUnitID,
		&i.Version,
		&i.PublishedAt,
		&i.CreatedBy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFormTemplate = `-- name: DeleteFormTemplate :exec
UPDATE form_templates
SET 
    status = 'inactive',
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteFormTemplate(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFormTemplate, id)
	return err
}

const getFormTemplateByID = `-- name: GetFormTemplateByID :one
SELECT id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at FROM form_templates
WHERE id = $1 AND status = 'active' AND deleted_at IS NULL
`

func (q *Queries) GetFormTemplateByID(ctx context.Context, id pgtype.UUID) (FormTemplate, error) {
	row := q.db.QueryRow(ctx, getFormTemplateByID, id)
	var i FormTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FormCategoryID,
		&i.BusinessUnitID,
		&i.Version,
		&i.PublishedAt,
		&i.CreatedBy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFormTemplates = `-- name: GetFormTemplates :many
SELECT id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at FROM form_templates
WHERE status = 'active' AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetFormTemplates(ctx context.Context) ([]FormTemplate, error) {
	rows, err := q.db.Query(ctx, getFormTemplates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormTemplate
	for rows.Next() {
		var i FormTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FormCategoryID,
			&i.BusinessUnitID,
			&i.Version,
			&i.PublishedAt,
			&i.CreatedBy,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFormTemplatesByCategory = `-- name: GetFormTemplatesByCategory :many
SELECT id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at FROM form_templates
WHERE form_category_id = $1 AND status = 'active' AND deleted_at IS NULL
ORDER BY created_at DESC
`

func (q *Queries) GetFormTemplatesByCategory(ctx context.Context, formCategoryID pgtype.UUID) ([]FormTemplate, error) {
	rows, err := q.db.Query(ctx, getFormTemplatesByCategory, formCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormTemplate
	for rows.Next() {
		var i FormTemplate
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.FormCategoryID,
			&i.BusinessUnitID,
			&i.Version,
			&i.PublishedAt,
			&i.CreatedBy,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishFormTemplate = `-- name: PublishFormTemplate :one
UPDATE form_templates
SET 
    published_at = CURRENT_TIMESTAMP,
    approved_at = CURRENT_TIMESTAMP,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at
`

func (q *Queries) PublishFormTemplate(ctx context.Context, id pgtype.UUID) (FormTemplate, error) {
	row := q.db.QueryRow(ctx, publishFormTemplate, id)
	var i FormTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FormCategoryID,
		&i.BusinessUnitID,
		&i.Version,
		&i.PublishedAt,
		&i.CreatedBy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateFormTemplate = `-- name: UpdateFormTemplate :one
UPDATE form_templates
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description),
    form_category_id = COALESCE($4, form_category_id),
    business_unit_id = COALESCE($5, business_unit_id),
    version = COALESCE($6, version),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, name, description, form_category_id, business_unit_id, version, published_at, created_by, status, created_at, updated_at, deleted_at
`

type UpdateFormTemplateParams struct {
	ID             pgtype.UUID `json:"id"`
	Name           string      `json:"name"`
	Description    pgtype.Text `json:"description"`
	FormCategoryID pgtype.UUID `json:"form_category_id"`
	BusinessUnitID pgtype.UUID `json:"business_unit_id"`
	Version        pgtype.Int4 `json:"version"`
}

func (q *Queries) UpdateFormTemplate(ctx context.Context, arg UpdateFormTemplateParams) (FormTemplate, error) {
	row := q.db.QueryRow(ctx, updateFormTemplate,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.FormCategoryID,
		arg.BusinessUnitID,
		arg.Version,
	)
	var i FormTemplate
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.FormCategoryID,
		&i.BusinessUnitID,
		&i.Version,
		&i.PublishedAt,
		&i.CreatedBy,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
