// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: form_sections.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFormSection = `-- name: CreateFormSection :one
INSERT INTO form_sections (
    form_template_id, section_name, section_order,
    description, conditional_logic
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, form_template_id, section_name, section_order, description, conditional_logic, status, created_at, updated_at, deleted_at
`

type CreateFormSectionParams struct {
	FormTemplateID   pgtype.UUID `json:"form_template_id"`
	SectionName      string      `json:"section_name"`
	SectionOrder     int32       `json:"section_order"`
	Description      pgtype.Text `json:"description"`
	ConditionalLogic []byte      `json:"conditional_logic"`
}

func (q *Queries) CreateFormSection(ctx context.Context, arg CreateFormSectionParams) (FormSection, error) {
	row := q.db.QueryRow(ctx, createFormSection,
		arg.FormTemplateID,
		arg.SectionName,
		arg.SectionOrder,
		arg.Description,
		arg.ConditionalLogic,
	)
	var i FormSection
	err := row.Scan(
		&i.ID,
		&i.FormTemplateID,
		&i.SectionName,
		&i.SectionOrder,
		&i.Description,
		&i.ConditionalLogic,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteFormSection = `-- name: DeleteFormSection :exec
UPDATE form_sections
SET 
    status = 'inactive',
    deleted_at = CURRENT_TIMESTAMP
WHERE id = $1
`

func (q *Queries) DeleteFormSection(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteFormSection, id)
	return err
}

const getFormSectionByID = `-- name: GetFormSectionByID :one
SELECT id, form_template_id, section_name, section_order, description, conditional_logic, status, created_at, updated_at, deleted_at FROM form_sections
WHERE id = $1 AND status = 'active' AND deleted_at IS NULL
`

func (q *Queries) GetFormSectionByID(ctx context.Context, id pgtype.UUID) (FormSection, error) {
	row := q.db.QueryRow(ctx, getFormSectionByID, id)
	var i FormSection
	err := row.Scan(
		&i.ID,
		&i.FormTemplateID,
		&i.SectionName,
		&i.SectionOrder,
		&i.Description,
		&i.ConditionalLogic,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getFormSections = `-- name: GetFormSections :many
SELECT id, form_template_id, section_name, section_order, description, conditional_logic, status, created_at, updated_at, deleted_at FROM form_sections
WHERE form_template_id = $1 AND status = 'active' AND deleted_at IS NULL
ORDER BY section_order
`

func (q *Queries) GetFormSections(ctx context.Context, formTemplateID pgtype.UUID) ([]FormSection, error) {
	rows, err := q.db.Query(ctx, getFormSections, formTemplateID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FormSection
	for rows.Next() {
		var i FormSection
		if err := rows.Scan(
			&i.ID,
			&i.FormTemplateID,
			&i.SectionName,
			&i.SectionOrder,
			&i.Description,
			&i.ConditionalLogic,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFormSection = `-- name: UpdateFormSection :one
UPDATE form_sections
SET 
    section_name = COALESCE($2, section_name),
    section_order = COALESCE($3, section_order),
    description = COALESCE($4, description),
    conditional_logic = COALESCE($5, conditional_logic),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND deleted_at IS NULL
RETURNING id, form_template_id, section_name, section_order, description, conditional_logic, status, created_at, updated_at, deleted_at
`

type UpdateFormSectionParams struct {
	ID               pgtype.UUID `json:"id"`
	SectionName      string      `json:"section_name"`
	SectionOrder     int32       `json:"section_order"`
	Description      pgtype.Text `json:"description"`
	ConditionalLogic []byte      `json:"conditional_logic"`
}

func (q *Queries) UpdateFormSection(ctx context.Context, arg UpdateFormSectionParams) (FormSection, error) {
	row := q.db.QueryRow(ctx, updateFormSection,
		arg.ID,
		arg.SectionName,
		arg.SectionOrder,
		arg.Description,
		arg.ConditionalLogic,
	)
	var i FormSection
	err := row.Scan(
		&i.ID,
		&i.FormTemplateID,
		&i.SectionName,
		&i.SectionOrder,
		&i.Description,
		&i.ConditionalLogic,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
